"Time.results.were.received",
"Value",
"sentence1"
)]
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this please select this sentence."] <-
"catch_trial_1"
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this do not select the other sentence select this one."] <-
"catch_trial_2"
catch_trials <- catch_trials %>% spread(sentence1, Value)
catch_trials$catch_trial_1 <-
as.character(catch_trials$catch_trial_1)
catch_trials$catch_trial_2 <-
as.character(catch_trials$catch_trial_2)
# I said false before for remove. Unclear why
catch_trials <-
unite_(
catch_trials,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# unique identifier, Type = catch, Value, Sentence 1
uniqueid <- read.csv(file = "table-06_aggregated.csv")
uniqueid[, "MD5.hash.of.participants.IP.address"] <-
as.character(uniqueid[, "MD5.hash.of.participants.IP.address"])
uniqueid[, "Time.results.were.received"] <-
as.integer(uniqueid[, "Time.results.were.received"])
uniqueid <- uniqueid[uniqueid$Value == "Start", ]
uniqueid <-
uniqueid[, c("MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"uniqueid")]
uniqueid <-
unite_(
uniqueid,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get demographics answers
demographics <- read.csv(file = "table-05_aggregated.csv")
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics <-
unite_(
demographics,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get rid of unnecessary columns
demographics <-
demographics[, c("subjectid", "PennElementName", "Parameter", "Value")]
demographics <-
demographics[demographics$PennElementName == "demographics form",]
demographics$PennElementName <- NULL
demographics$Value <- as.character(demographics$Value)
demographics$Parameter <- as.character(demographics$Parameter)
demographics$Value[demographics$Value == "entry.199788844"] <- "Age"
demographics$Parameter[demographics$Parameter == "entry.520109694"] <-
"Gender"
demographics$Parameter[demographics$Parameter == "entry.1512699209"] <-
"Native_Lang"
demographics$Parameter[demographics$Parameter == "entry.2041701843"] <-
"Education"
demographics$Parameter[demographics$Parameter == "entry.1032518118"] <-
"Parent_Education"
demographics$Value[demographics$Value == "entry.520109694.other_option_response"] <-
"Gender"
demographics$Value[demographics$Value == "entry.1512699209.other_option_response"] <-
"Native_Lang"
demographics$Value[demographics$Value == "entry.2041701843.other_option_response"] <-
"Education"
demographics$Value[demographics$Value == "entry.1032518118.other_option_response"] <-
"Parent_Education"
demographics$Parameter[demographics$Parameter == "entry.79932629"] <-
"Ling_Course"
# Switch age and value
values <-
c("Age",
"Gender",
"Native_Lang",
"Education",
"Parent_Education")
# learn how to do this later for (i in length(values)) {}
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[1]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[1]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[2]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[2]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[3]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[3]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[4]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[4]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[5]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[5]],
Parameter))
# delete other responses unless they contain text
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "")))
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "__other_option__")))
# make wide
demographics <- demographics %>% drop_na(Value)
demographics <- demographics %>% spread(Parameter, Value)
# demographics <- demographics[demographics$Value=="Start",]
# demographics <- demographics[c("MD5.hash.of.participants.IP.address", "Time.results.were.received", "demographics"),]
# demographics <- unite_(demographics, "subjectid", c("MD5.hash.of.participants.IP.address", "Time.results.were.received"), sep = "")
trials <- read.csv(file = "table-04_aggregated.csv")
trials[, "MD5.hash.of.participants.IP.address"] <-
as.character(trials[, "MD5.hash.of.participants.IP.address"])
trials[, "Time.results.were.received"] <-
as.character(trials[, "Time.results.were.received"])
# join tables
tables_merged <-
join_all(
list(
instruction_check,
instruction_condition,
catch_trials,
uniqueid,
demographics
),
by = "subjectid",
type = 'full'
)
tables_merged$Accept <- NA
# Catch trials
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
instruction_check_response == "choice2" &
catch_trial_1  == "sentence1" &
catch_trial_2 == "sentence1",
1,
0
))
View(tables_merged)
# excluded so far
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# excluded after language considered
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Native_Lang == "English only" |
Native_Lang  == "English and one or more other languages",
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# Remove anyone under 18
tables_merged$Age <- as.integer(tables_merged$Age)
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Age >= 18 |
is.na(Age) == TRUE,
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1])
# exclude people with ling experience
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Ling_Course == "Yes",
0,
Accept
))
length(tables_merged$Accept[tables_merged$Accept == 1])
# get subjects who have to be replaced
all_set <- tables_merged[tables_merged$Accept == 1, c("Instruction","Accept")]
current_counts <- plyr::count(all_set, "Instruction")
current_counts$remaining <- 50 - current_counts$freq
View(all_set)
View(catch_trials)
View(catch_trials)
View(catch_trials)
View(current_counts)
# Remove irrelevant columns
# Remove participants that don't fit: failed catch trials, English-nonnative, reports age <18, has taken ling course
# Transform data into something useable: correct answers, etc.
library(tidyr)
library(plyr)
library(dplyr)
setwd("~/gtd/courses/Honors-Thesis/data/round1/results/tables_aggregated")
# get all data
# columns: id, surveycode, trial, response, response to catch trial 1 and 2, response to instruction check, get age data, language, other demographics
instruction_condition <- read.csv(file = "table-02_aggregated.csv")
instruction_condition[, "MD5.hash.of.participants.IP.address"] <-
as.character(instruction_condition[, "MD5.hash.of.participants.IP.address"])
instruction_condition[, "Time.results.were.received"] <-
as.integer(instruction_condition[, "Time.results.were.received"])
instruction_condition <-
instruction_condition[instruction_condition$Value == "Start", ]
instruction_condition <-
instruction_condition[, c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Instruction"
)]
instruction_condition <-
unite_(
instruction_condition,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# All we want is a unique identifier and instruction condition
instruction_check <- read.csv(file = "table-03_aggregated.csv")
instruction_check[, "MD5.hash.of.participants.IP.address"] <-
as.character(instruction_check[, "MD5.hash.of.participants.IP.address"])
instruction_check[, "Time.results.were.received"] <-
as.integer(instruction_check[, "Time.results.were.received"])
instruction_check <-
instruction_check[instruction_check$Parameter == "Selection", ]
instruction_check <-
instruction_check[, c("MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Value")]
colnames(instruction_check)[which(names(instruction_check) == "Value")] <-
"instruction_check_response"
instruction_check <-
unite_(
instruction_check,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# catch trials
catch_trials <- read.csv(file = "table-04_aggregated.csv")
catch_trials[, "MD5.hash.of.participants.IP.address"] <-
as.character(catch_trials[, "MD5.hash.of.participants.IP.address"])
catch_trials[, "Time.results.were.received"] <-
as.character(catch_trials[, "Time.results.were.received"])
catch_trials <- catch_trials[catch_trials$Type == "catch", ]
catch_trials <- catch_trials[catch_trials$Parameter == "Selection", ]
catch_trials[, "Time.results.were.received"] <-
as.integer(catch_trials[, "Time.results.were.received"])
catch_trials[, "sentence1"] <-
as.character(catch_trials[, "sentence1"])
# catch_trials <- unite_(catch_trials, "sentence1", c("sentence1","Comments"), sep = ", ")
catch_trials <-
catch_trials[, c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Value",
"sentence1"
)]
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this please select this sentence."] <-
"catch_trial_1"
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this do not select this sentence."] <-
"catch_trial_2"
catch_trials <- catch_trials %>% spread(sentence1, Value)
catch_trials$catch_trial_1 <-
as.character(catch_trials$catch_trial_1)
catch_trials$catch_trial_2 <-
as.character(catch_trials$catch_trial_2)
# I said false before for remove. Unclear why
catch_trials <-
unite_(
catch_trials,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# unique identifier, Type = catch, Value, Sentence 1
uniqueid <- read.csv(file = "table-06_aggregated.csv")
uniqueid[, "MD5.hash.of.participants.IP.address"] <-
as.character(uniqueid[, "MD5.hash.of.participants.IP.address"])
uniqueid[, "Time.results.were.received"] <-
as.integer(uniqueid[, "Time.results.were.received"])
uniqueid <- uniqueid[uniqueid$Value == "Start", ]
uniqueid <-
uniqueid[, c("MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"uniqueid")]
uniqueid <-
unite_(
uniqueid,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get demographics answers
demographics <- read.csv(file = "table-05_aggregated.csv")
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics <-
unite_(
demographics,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get rid of unnecessary columns
demographics <-
demographics[, c("subjectid", "PennElementName", "Parameter", "Value")]
demographics <-
demographics[demographics$PennElementName == "demographics form",]
demographics$PennElementName <- NULL
demographics$Value <- as.character(demographics$Value)
demographics$Parameter <- as.character(demographics$Parameter)
demographics$Value[demographics$Value == "entry.199788844"] <- "Age"
demographics$Parameter[demographics$Parameter == "entry.520109694"] <-
"Gender"
demographics$Parameter[demographics$Parameter == "entry.1512699209"] <-
"Native_Lang"
demographics$Parameter[demographics$Parameter == "entry.2041701843"] <-
"Education"
demographics$Parameter[demographics$Parameter == "entry.1032518118"] <-
"Parent_Education"
demographics$Value[demographics$Value == "entry.520109694.other_option_response"] <-
"Gender"
demographics$Value[demographics$Value == "entry.1512699209.other_option_response"] <-
"Native_Lang"
demographics$Value[demographics$Value == "entry.2041701843.other_option_response"] <-
"Education"
demographics$Value[demographics$Value == "entry.1032518118.other_option_response"] <-
"Parent_Education"
demographics$Parameter[demographics$Parameter == "entry.79932629"] <-
"Ling_Course"
# Switch age and value
values <-
c("Age",
"Gender",
"Native_Lang",
"Education",
"Parent_Education")
# learn how to do this later for (i in length(values)) {}
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[1]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[1]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[2]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[2]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[3]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[3]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[4]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[4]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[5]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[5]],
Parameter))
# delete other responses unless they contain text
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "")))
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "__other_option__")))
# make wide
demographics <- demographics %>% drop_na(Value)
demographics <- demographics %>% spread(Parameter, Value)
# demographics <- demographics[demographics$Value=="Start",]
# demographics <- demographics[c("MD5.hash.of.participants.IP.address", "Time.results.were.received", "demographics"),]
# demographics <- unite_(demographics, "subjectid", c("MD5.hash.of.participants.IP.address", "Time.results.were.received"), sep = "")
trials <- read.csv(file = "table-04_aggregated.csv")
trials[, "MD5.hash.of.participants.IP.address"] <-
as.character(trials[, "MD5.hash.of.participants.IP.address"])
trials[, "Time.results.were.received"] <-
as.character(trials[, "Time.results.were.received"])
# join tables
tables_merged <-
join_all(
list(
instruction_check,
instruction_condition,
catch_trials,
uniqueid,
demographics
),
by = "subjectid",
type = 'full'
)
tables_merged$Accept <- NA
# Catch trials
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
instruction_check_response == "choice2" &
catch_trial_1  == "sentence1" &
catch_trial_2 == "sentence2",
1,
0
))
# excluded so far
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# excluded after language considered
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Native_Lang == "English only" |
Native_Lang  == "English and one or more other languages",
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# Remove anyone under 18
tables_merged$Age <- as.integer(tables_merged$Age)
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Age >= 18 |
is.na(Age) == TRUE,
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1])
# get subjects who have to be replaced
all_set <- tables_merged[tables_merged$Accept == 1, c("Instruction","Accept")]
current_counts <- plyr::count(all_set, "Instruction")
current_counts$remaining <- 50 - current_counts$freq
# exclude people with ling experience
tables_merged2 <- tables_merged %>% mutate(
Accept = ifelse(
Ling_Course == "Yes",
0,
Accept
))
# 118 vs. 131: Should I even do this?
length(tables_merged2$Accept[tables_merged2$Accept == 1])
all_set2 <- tables_merged2[tables_merged2$Accept == 1, c("Instruction","Accept")]
current_counts2 <- plyr::count(all_set2, "Instruction")
current_counts2$remaining <- 50 - current_counts2$freq
View(current_counts2)
View(current_counts)
View(current_counts2)
source('~/gtd/courses/Honors-Thesis/code/R_Scripts/clean_load2.R', echo=TRUE)
View(current_counts)
source('~/gtd/courses/Honors-Thesis/code/R_Scripts/clean_load.R', echo=TRUE)
source('~/gtd/courses/Honors-Thesis/code/R_Scripts/clean_load.R', echo=TRUE)
View(current_counts2)
View(current_counts)
source('~/gtd/courses/Honors-Thesis/code/R_Scripts/clean_load2.R', echo=TRUE)
View(tables_merged)
View(tables_merged)
