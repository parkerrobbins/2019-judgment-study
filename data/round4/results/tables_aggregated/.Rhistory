devtools::install_github("ropenscilabs/ponyexpress")
--version
r --version
R --version
version
version
1:50
names <- ("Lilia", "Parker", "Matt", "Jeffrey")
names <- ("Lilia", "Parker", "Matt", "Jeffrey")
names <- ('Lilia', 'Parker', 'Matt', 'Jeffrey')
x <- ('Lilia', 'Parker', 'Matt', 'Jeffrey')
x <- c('Lilia', 'Parker', 'Matt', 'Jeffrey')
xx <- combinations<-(4,3,x)
xx <- combinations(4,3,x)
library(gtools)
xx <- combinations(4,3,x)
View(xx)
View(xx)
xx <- combinations(4,3,x)
xx <- combinations(4,2,x)
x = 20
# Twice as many filler sentences as test sentences
test_items = x
filler_items = 3*test_items
total_items = test_items + filler_items
print(total_items)
x = 30
source('~/gtd/courses/Honors-Thesis/code/stimuli.R', echo=TRUE)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
test_items
help("combn")
combn(30,30)
combn([1:30], 30)
combn(1:30, 30)
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
test_items = x
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 30
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
# Counterbalancing: creating many tokens for each condition and presenting them across conditions?
# Heather, p. 23: weak prepositions cannnot participate in stranding; p. 41 -Functional particles and adverbs
# Heather, p. 23: weak prepositions cannnot participate in stranding; p. 41 -Functional particles and adverbs
# p. Stranding works with +Functional semi-lexical and functional prepositions
# Sentence types: Declarative, Interrogative, Embedded Interrogative, Imperative
# Sentence types: Declarative, Interrogative, Embedded Interrogative, Imperative
# Sentence components: verbs, variety of prepositions of different types (See Heather's thing)
# Make sure all nouns are frequent
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 30
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 30
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
source('~/gtd/courses/Honors-Thesis/code/stimuli.R', echo=TRUE)
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 40
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 25
source('~/gtd/courses/Honors-Thesis/code/stimuli.R', echo=TRUE)
25/4
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 28
test_items = x
filler_items = 2*test_items
total_items = test_items + filler_items
print(total_items)
# Assuming 30s per judgment
run_time = total_items*0.5
print(run_time)
source('~/gtd/courses/Honors-Thesis/code/stimuli.R', echo=TRUE)
15*0.75
total_items
96 * 4
96 / 4
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 32  # 8 token in each trial
test_items = x
filler_items = 2*test_items  # For forced choice, this would actually be total judgments
total_items = test_items + filler_items # 96 total, 4 blocks = 24 in each block, out of which 8 are tokens
# Numbers of participants
num_conditions = 4
# Numbers of participants
num_conditions = 4
num_participants_per_condition = 50
pay_per_participant = length_of_task * mturk_hourly
length_of_task = 1/3 #hr
pay_per_participant = length_of_task * mturk_hourly
# Numbers of participants
num_conditions = 4
num_participants_per_condition = 50
mturk_hourly = 6
length_of_task = 1/3 #hr
pay_per_participant = length_of_task * mturk_hourly
# Numbers of participants
num_conditions = 4
num_participants_per_condition = 50
mturk_hourly = 8
length_of_task = 1/3 #hr
pay_per_participant = length_of_task * mturk_hourly
# Numbers of participants
num_conditions = 4
num_participants_per_condition = 50
mturk_hourly = 9
length_of_task = 1/3 #hr
pay_per_participant = length_of_task * mturk_hourly
# Numbers of participants
num_conditions = 4
num_participants_per_condition = 50
mturk_hourly = 12
length_of_task = 1/3 #hr
pay_per_participant = length_of_task * mturk_hourly
num_conditions * num_participants_per_condition = study_1_n
pay_per_participant = length_of_task * mturk_hourly
num_conditions * num_participants_per_condition -> study_1_n
study_1_payment = study_1_n * pay_per_participant
# assuming the same cost for second study
study_1_payment*2 -> payment_total
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 32  # 8 token in each block
test_items = x
# Twice as many filler sentences as test sentences (Probably half grammatical, half ungrammatical)
x = 32  # 8 token in each block
test_items = x
filler_items = 2*test_items  # For forced choice, this would actually be total judgments
total_items = test_items + filler_items # 96 total, 4 blocks = 24 in each block, out of which 8 are tokens
library(tidyr)
library(plyr)
library(dplyr)
library(lme4)
setwd("~/gtd/courses/Honors-Thesis/data/round4/results/tables_aggregated")
instruction_condition <- read.csv(file = "table-02_aggregated.csv")
instruction_condition[, "MD5.hash.of.participants.IP.address"] <-
as.character(instruction_condition[, "MD5.hash.of.participants.IP.address"])
instruction_condition[, "Time.results.were.received"] <-
as.integer(instruction_condition[, "Time.results.were.received"])
instruction_condition <-
instruction_condition[instruction_condition$Value == "Start", ]
instruction_condition <-
instruction_condition[, c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Instruction"
)]
instruction_condition <-
unite_(
instruction_condition,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# All we want is a unique identifier and instruction condition
instruction_check <- read.csv(file = "table-03_aggregated.csv")
instruction_check[, "MD5.hash.of.participants.IP.address"] <-
as.character(instruction_check[, "MD5.hash.of.participants.IP.address"])
instruction_check[, "Time.results.were.received"] <-
as.integer(instruction_check[, "Time.results.were.received"])
instruction_check <-
instruction_check[instruction_check$Parameter == "Selection", ]
instruction_check <-
instruction_check[, c("MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Value")]
colnames(instruction_check)[which(names(instruction_check) == "Value")] <-
"instruction_check_response"
instruction_check <-
unite_(
instruction_check,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# catch trials
catch_trials <- read.csv(file = "table-04_aggregated.csv")
catch_trials[, "MD5.hash.of.participants.IP.address"] <-
as.character(catch_trials[, "MD5.hash.of.participants.IP.address"])
catch_trials[, "Time.results.were.received"] <-
as.character(catch_trials[, "Time.results.were.received"])
catch_trials <- catch_trials[catch_trials$Type == "catch", ]
catch_trials <- catch_trials[catch_trials$Parameter == "Selection", ]
catch_trials[, "Time.results.were.received"] <-
as.integer(catch_trials[, "Time.results.were.received"])
catch_trials[, "sentence1"] <-
as.character(catch_trials[, "sentence1"])
# catch_trials <- unite_(catch_trials, "sentence1", c("sentence1","Comments"), sep = ", ")
catch_trials <-
catch_trials[, c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"Value",
"sentence1"
)]
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this please select this sentence."] <-
"catch_trial_1"
catch_trials$sentence1[catch_trials$sentence1 == "If you're reading this do not select the other sentence select this one."] <-
"catch_trial_2"
catch_trials <- catch_trials %>% spread(sentence1, Value)
catch_trials$catch_trial_1 <-
as.character(catch_trials$catch_trial_1)
catch_trials$catch_trial_2 <-
as.character(catch_trials$catch_trial_2)
# I said false before for remove. Unclear why
catch_trials <-
unite_(
catch_trials,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# unique identifier, Type = catch, Value, Sentence 1
uniqueid <- read.csv(file = "table-06_aggregated.csv")
uniqueid[, "MD5.hash.of.participants.IP.address"] <-
as.character(uniqueid[, "MD5.hash.of.participants.IP.address"])
uniqueid[, "Time.results.were.received"] <-
as.integer(uniqueid[, "Time.results.were.received"])
uniqueid <- uniqueid[uniqueid$Value == "Start", ]
uniqueid <-
uniqueid[, c("MD5.hash.of.participants.IP.address",
"Time.results.were.received",
"uniqueid")]
uniqueid <-
unite_(
uniqueid,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get demographics answers
demographics <- read.csv(file = "table-05_aggregated.csv")
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics[, "MD5.hash.of.participants.IP.address"] <-
as.character(demographics[, "MD5.hash.of.participants.IP.address"])
demographics[, "Time.results.were.received"] <-
as.integer(demographics[, "Time.results.were.received"])
demographics <-
unite_(
demographics,
"subjectid",
c(
"MD5.hash.of.participants.IP.address",
"Time.results.were.received"
),
sep = ""
)
# get rid of unnecessary columns
demographics <-
demographics[, c("subjectid", "PennElementName", "Parameter", "Value")]
demographics <-
demographics[demographics$PennElementName == "demographics form",]
demographics$PennElementName <- NULL
demographics$Value <- as.character(demographics$Value)
demographics$Parameter <- as.character(demographics$Parameter)
demographics$Value[demographics$Value == "entry.199788844"] <- "Age"
demographics$Parameter[demographics$Parameter == "entry.520109694"] <-
"Gender"
demographics$Parameter[demographics$Parameter == "entry.1512699209"] <-
"Native_Lang"
demographics$Parameter[demographics$Parameter == "entry.2041701843"] <-
"Education"
demographics$Parameter[demographics$Parameter == "entry.1032518118"] <-
"Parent_Education"
demographics$Value[demographics$Value == "entry.520109694.other_option_response"] <-
"Gender"
demographics$Value[demographics$Value == "entry.1512699209.other_option_response"] <-
"Native_Lang"
demographics$Value[demographics$Value == "entry.2041701843.other_option_response"] <-
"Education"
demographics$Value[demographics$Value == "entry.1032518118.other_option_response"] <-
"Parent_Education"
demographics$Parameter[demographics$Parameter == "entry.79932629"] <-
"Ling_Course"
values <-
c("Age",
"Gender",
"Native_Lang",
"Education",
"Parent_Education")
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[1]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[1]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[2]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[2]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[3]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[3]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[4]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[4]],
Parameter))
demographics <-
demographics %>% mutate(Value = ifelse(Value == values[[5]],
Parameter,                                                       Value))
demographics <-
demographics %>% mutate(Parameter = ifelse(Value == Parameter,
values[[5]],
Parameter))
# delete other responses unless they contain text
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "")))
demographics <- demographics %>%
mutate_if(is.character, list( ~ na_if(., "__other_option__")))
# make wide
demographics <- demographics %>% drop_na(Value)
demographics <- demographics %>% spread(Parameter, Value)
trials <- read.csv(file = "table-04_aggregated.csv")
trials[, "MD5.hash.of.participants.IP.address"] <-
as.character(trials[, "MD5.hash.of.participants.IP.address"])
trials[, "Time.results.were.received"] <-
as.character(trials[, "Time.results.were.received"])
# join tables
tables_merged <-
join_all(
list(
instruction_check,
instruction_condition,
catch_trials,
uniqueid,
demographics
),
by = "subjectid",
type = 'full'
)
tables_merged$Accept <- NA
# Catch trials
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
instruction_check_response == "choice2" &
catch_trial_1  == "sentence1" &
catch_trial_2 == "sentence1",
1,
0
))
# excluded so far
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# excluded after language considered
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Native_Lang == "English only" |
Native_Lang  == "English and one or more other languages",
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1]) / length(tables_merged$Accept)
length(tables_merged$Accept[tables_merged$Accept == 1])
# Remove anyone under 18
tables_merged$Age <- as.integer(tables_merged$Age)
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Age >= 18 |
is.na(Age) == TRUE,
Accept,
0
))
length(tables_merged$Accept[tables_merged$Accept == 1])
# exclude people with ling experience
tables_merged <- tables_merged %>% mutate(
Accept = ifelse(
Ling_Course == "Yes",
0,
Accept
))
length(tables_merged$Accept[tables_merged$Accept == 1])
View(tables_merged)
source('~/clean_load4.R')
